name: Build Windows
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  repository_dispatch:
    types: [init]

concurrency:
  group: environment-win-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build - ${{ matrix.config.os }}
    if: github.repository != 'Silverlan/pr_module_template'
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: windows-latest
            name: "Windows x64 MSVC"
            artifact: "Windows-MSVC.tar.xz"
            build_type: "RelWithDebInfo"
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
            cc: "cl"
            cxx: "cl"
            archiver: "7z a"
            generators: "Visual Studio 16 2022"
            build_dir: 'build'
    steps:
      - uses: actions/checkout@v3
      - uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: git mingw-w64-ucrt-x86_64-gcc

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install python extensions
        run: pip install numpy

      - name: Get Python location
        id: python-loc
        run: |
          $pythonExecutable = where.exe python
          $pythonExecutable = $pythonExecutable -replace '\\python\.exe$', ''
          echo "::set-output name=python_location::$pythonExecutable"

      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v2

      - name: Get Module Info
        id: module-info
        uses: Silverlan/pr_module_template/github_actions/get_module_info@main

      - name: Print Python location
        shell: bash
        run: |
          echo "PYthon location: ${{ steps.python-loc.outputs.python_location }}"

      - name: Build Module
        id: build-module
        uses: Silverlan/tmp_pragma_ci/github_actions/build_generic_module@master
        with:
          module: ${{ steps.module-info.outputs.module_name }}
          build-args: '--build-mediapipe=0 --build=0 --python39-path="${{ steps.python-loc.outputs.python_location }}"'

      - name: Build Mediapipe
        shell: msys2 {0}
        run: |
          curDir=$(pwd)
          cd "c:/pragma/deps/mediapipe"
          # Execute bat
          echo "Executing bat..."
          "$curDir/pragma/modules/pr_mediapipe/build_scripts/temp/build_mediapipe.bat"
          
      - name: Build Module 2
        id: build-module2
        uses: Silverlan/tmp_pragma_ci/github_actions/build_generic_module@master
        with:
          module: ${{ steps.module-info.outputs.module_name }}
          build-args: '--build-mediapipe=0'
         
      - name: Create Release Files
        shell: bash
        run: |
          mkdir -p release/${{ steps.module-info.outputs.install_directory }}
          cp "${{ steps.build-module.outputs.install-dir }}/modules/${{ steps.module-info.outputs.module_name }}.dll" "release/${{ steps.module-info.outputs.install_directory }}"

      - name: Release Binaries
        uses: Silverlan/common_actions/release_nightly_binaries@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit: ${{ github.ref_name }}
